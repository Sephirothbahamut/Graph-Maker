/*! \page page_manual_usage_si_unordered_map unordered_map
\code{.cpp}
template<typename T_key,typename T_value> class unordered_map{
	unordered_map();
	unordered_map(const unordered_map@ other);
	unordered_map& opAssign(const unordered_map@ other);
	unordered_map& swap(unordered_map &inout other);
	void SetDirectcomp(bool yesno);
	
	
	
	int size();
	void clear();
	bool empty();
	
	void insert(T_key &in key,T_value &in value);
	void erase(T_key &in key);
	bool erase(const unordered_map_iterator<T> &in iterator);
	int erase(const unordered_map_iterator<T> &in iterator_range_begin, const unordered_map_iterator<T> &in iterator_range_end);
	
	//find without success notice
	T_value& find(const T_key &in key);
	//find with success notice
	T_value& find(const T_key &in key,bool &out success);
	//find that returns an iterator, returns end if not found
	unordered_map_iterator<T> find_iterator(const T &in key);
	
	//property accessors for opIndex
	const T_value& get_opIndex(const T_key &in) const;
	void set_opIndex(const T_key&in,const T_value&in);
	/*
		example for opindex get:
			mymap.insert(1,"aa");
			mymap.insert(2,"bb");
			
			MyPrint(mymap[1]);
			
			//prints: aa
			
		example for opindex set:
			mymap[1] = "aa";
			mymap[2] = "bb";
			
			MyPrint(mymap[2]);
			
			//prints: bb
	*/
	
	unordered_map_iterator<T> begin();
	unordered_map_iterator<T> end();
	
	
	
	//Nonstandard convenience functions
	
	bool contains(T_key &in key);
};
\endcode
*/